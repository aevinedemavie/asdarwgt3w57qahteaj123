--// =========================================================
--// LimitHub | Fish It v0.1 [All Version]  (FULL • Static Player by Catch • Rarity Group • Mutation-aware)
--// =========================================================

local G = (getgenv and getgenv()) or _G
if G.__LimitHub_Running then
    warn("[LimitHub] Script Already Running")
    return
end
G.__LimitHub_Running = true

local Library, SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/jamalarap61/Mslspakwnendlsowjnssoaknana/main/wnsoaowknswlwksnwmk.lua"))()
local CONFIG_PATH = "LimitHub/FishIT/config/FishIT.json"

-- ===== services/locals =====
local Players            = game:GetService("Players")
local LocalPlayer        = Players.LocalPlayer
local HttpService        = game:GetService("HttpService")
local ReplicatedStorage  = game:GetService("ReplicatedStorage")

-- =======================================================================
-- UI Window
-- =======================================================================
local function gradient(text, startColor, endColor)
    local result, length = "", #text
    for i = 1, length do
        local t = (i - 1) / math.max(length - 1, 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        result = result .. string.format('<font color="rgb(%d, %d, %d)">%s</font>', r, g, b, text:sub(i, i))
    end
    return result
end

local Window = Library:CreateWindow({
    Title = gradient("LimitHub | Fish It v0.1 [All Version]", Color3.fromHex("#8ab4f8"), Color3.fromHex("#00ffe1")),
    Size = UDim2.new(0, 480, 0, 300),
    TabWidth = 120,
    Theme = "LimitHub",
    Acrylic = false
})
local Tabs = {
    Main     = Window:AddTab({ Title = "Main",     Icon = "star" }),
    Player   = Window:AddTab({ Title = "Player",   Icon = "user" }),
    Weather  = Window:AddTab({ Title = "Weather",  Icon = "cloud" }),
    Enchant  = Window:AddTab({ Title = "Enchant",  Icon = "wand"}),
    Shop     = Window:AddTab({ Title = "Shop",     Icon = "shopping-cart" }),
    Islands  = Window:AddTab({ Title = "Islands",  Icon = "map" }),
    NPC      = Window:AddTab({ Title = "NPC",      Icon = "bot" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "cog" })
}
Window:SelectTab(1)

local function NotifyHub(text)
    Library:Notify({ Title = "LimitHub", Content = text, Duration = 5 })
end

-- =======================================================================
-- Webhook Option
-- =======================================================================
local WebhookState = { url = "", enabled = false }

local WebhookTab     = Window:AddTab({ Title = "Webhook", Icon = "link" })
local WebhookSection = WebhookTab:AddSection("Webhook Option")

WebhookSection:AddInput("WebhookURL", {
    Title = "Webhook URL",
    Description = "",
    Placeholder = "You webhook link here!",
    Default = "",
    Callback = function(text)
        WebhookState.url = tostring(text or "")
    end
})

-- ====== Filter Rarity utk Webhook (fix multi-select) ======
WebhookState.rarityFilter = {}
WebhookState._raritySet   = {}

local function _normR(s) return (tostring(s or ""):gsub("^%s+",""):gsub("%s+$",""):lower()) end

-- IMPORTANT for Multi=true: Values harus dictionary label->string
local RarityValues = {
    Common     = "Common",
    Uncommon   = "Uncommon",
    Rare       = "Rare",
    Epic       = "Epic",
    Legendary  = "Legendary",
    Mythic     = "Mythic",
    Secret     = "Secret",
}

local function _rebuildRaritySet(vals)
    for k in pairs(WebhookState._raritySet) do WebhookState._raritySet[k] = nil end
    table.clear(WebhookState.rarityFilter)
    if type(vals) ~= "table" then return end

    -- terima dua bentuk: map {Common=true,...} atau array {"Common","Rare",...}
    local hasNumeric = false
    for k,_ in pairs(vals) do if typeof(k) == "number" then hasNumeric = true break end end

    if hasNumeric then
        for _,v in ipairs(vals) do
            local key = _normR(v)
            if key ~= "" then
                WebhookState._raritySet[key] = true
                table.insert(WebhookState.rarityFilter, v)
            end
        end
    else
        for k,v in pairs(vals) do
            if v then
                local key = _normR(k)
                if key ~= "" then
                    WebhookState._raritySet[key] = true
                    table.insert(WebhookState.rarityFilter, k)
                end
            end
        end
    end
end

WebhookSection:AddDropdown("RarityWebhook", {
    Title = "Choose Rarity Webhook",
    Description = "Only show rarity you want (empty = all)",
    Values = RarityValues,  -- dictionary label->string (AMAN untuk Multi=true)
    Default = {},           -- kosongkan default agar tidak kirim string ke loader
    Multi = true,
    Callback = function(vals)
        _rebuildRaritySet(vals)
    end
})

WebhookSection:AddToggle("WebhookToggle", {
    Title = "Enable Webhook",
    Description = "Send Webhook that fish you caught!",
    Default = false,
    Callback = function(on)
        WebhookState.enabled = on and true or false
    end
})

local function sendWebhook(message, state)
    state = state or WebhookState
    local msg = tostring(message or "")
    if not (state.enabled and type(state.url) == "string" and #state.url > 0) then return end
    local req = (syn and syn.request) or (http and http.request) or http_request or request
    if not req then return end
    pcall(function()
        req({
            Url = state.url, Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = HttpService:JSONEncode({ content = msg })
        })
    end)
end

local function sendWebhookEmbed(title, fields, state)
    state = state or WebhookState
    if not (state.enabled and type(state.url) == "string" and #state.url > 0) then return end
    local req = (syn and syn.request) or (http and http.request) or http_request or request
    if not req then return end
    local embed = {
        title = tostring(title or "Catch"),
        color = 3447003,
        fields = fields or {},
        footer = { text = "discord.gg/limithub" },
        timestamp = DateTime.now():ToIsoDate()
    }
    pcall(function()
        req({
            Url = state.url, Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = HttpService:JSONEncode({ content = "", embeds = { embed } })
        })
    end)
end

-- =======================================================================
-- Resolver Fish (rarity + rbxassetid -> thumbnail)
-- =======================================================================
local function _norm(s) return (tostring(s or ""):lower():gsub("[^%w]+"," "):gsub("%s+"," ")) end

local TierMap = {
    [1]="Common",[2]="Uncommon",[3]="Rare",[4]="Epic",
    [5]="Legendary / Mythic",[6]="Mythic",[7]="Secret",
    [90]="Trophy",[95]="Collectible",[100]="Exclusive",[1000]="DEV",
}
local RarityColor = {
    Common=0x95A5A6, Uncommon=0x2ECC71, Rare=0x3498DB, Epic=0x9B59B6,
    Legendary=0xF1C40F, Mythic=0xE67E22, Secret=0xE74C3C
}

local _fishCache = {}  -- key: norm(name) -> {name, rarity, iconUrl}

local function _extractAssetId(s)
    if type(s)~="string" then return nil end
    return s:match("rbxassetid://(%d+)") or s:match("(%d+)$")
end

local function _thumbFromAssetId(assetStr)
    local id = _extractAssetId(assetStr)
    if not id then return nil end
    local ok, res = pcall(function()
        local url = ("https://thumbnails.roblox.com/v1/assets?assetIds=%s&size=420x420&format=Png&isCircular=false"):format(id)
        local raw = game:HttpGet(url)
        return HttpService:JSONDecode(raw)
    end)
    if ok and res and res.data and res.data[1] and res.data[1].imageUrl then
        return res.data[1].imageUrl
    end
    return nil
end

local function resolveFishInfoByName(name)
    if not name or name=="" then return nil end
    local key = _norm(name)
    if _fishCache[key] then return _fishCache[key] end

    local Items = ReplicatedStorage:FindFirstChild("Items")
    if not Items then return nil end

    local found
    for _, ms in ipairs(Items:GetDescendants()) do
        if ms:IsA("ModuleScript") then
            local ok, mod = pcall(require, ms)
            if ok and type(mod)=="table" then
                local d = mod.Data or mod.data or mod
                if d and d.Name and _norm(d.Name)==key then
                    local rarity = (d.Tier and TierMap[d.Tier]) or "(unknown)"
                    found = {
                        name = d.Name,
                        rarity = rarity,
                        iconUrl = d.Icon and _thumbFromAssetId(d.Icon) or nil, -- KONVERSI rbxassetid -> thumbnail URL
                    }
                    break
                end
            end
        end
    end

    _fishCache[key] = found
    return found
end

local function _passRarityFilter(r)
    local set = WebhookState._raritySet
    if not set or next(set) == nil then return true end
    return set[_normR(r)] == true
end

local AUTHOR_ICON = "https://cdn.discordapp.com/attachments/1412614172302381106/1412899628629758122/B43515AA-FBA7-4D37-B830-5C531B5A0158.png?ex=68b9f8d1&is=68b8a751&hm=8fe9bfd14168ce1f09becd02b388734f2a257f726afbde62ecc9a9f18d0e7c2e"

-- =======================================================================
-- Player Stats (counter by CATCH only) + rarity grouping + mutation-aware
-- =======================================================================
local Stats = { counts = {}, dirty = false }

local function Stats_Add(name, n)
    name = tostring(name or ""):gsub("^%s+",""):gsub("%s+$","")
    if name == "" then return end
    Stats.counts[name] = (Stats.counts[name] or 0) + (n or 1)
    Stats.dirty = true
end
local function Stats_Reset()
    for k in pairs(Stats.counts) do Stats.counts[k] = nil end
    Stats.dirty = true
end

-- SECTION di tab Webhook
local PlayerStatsSection = WebhookTab:AddSection("Player Stats Webhook")

WebhookState.statsUrl     = WebhookState.statsUrl     or ""
WebhookState.statsEnabled = WebhookState.statsEnabled or false
WebhookState.statsMsgId   = WebhookState.statsMsgId   or nil
WebhookState.lastStats    = WebhookState.lastStats    or ""

PlayerStatsSection:AddInput("StatsWebhookURL", {
    Title = "Stats Webhook URL",
    Placeholder = "Paste webhook link for Player Stats!",
    Default = WebhookState.statsUrl or "",
    Callback = function(text)
        WebhookState.statsUrl = tostring(text or "")
    end
})

PlayerStatsSection:AddToggle("StatsToggle", {
    Title = "Enable Player Stats",
    Description = "Edit one webhook message with your fish list",
    Default = WebhookState.statsEnabled or false,
    Callback = function(on)
        WebhookState.statsEnabled = not not on
    end
})

PlayerStatsSection:AddButton({
    Title = "Reset Stats",
    Description = "Clear local fish counters (webhook will be updated)",
    Callback = function()
        Stats_Reset()
    end
})

-- waktu lokal aman
local function _clockStr()
    local ok, s = pcall(function() return os.date("%H:%M:%S") end)
    return ok and s or "00:00:00"
end

-- mutation prefixes (abaikan saat klasifikasi rarity; tampilkan nama aslinya)
local MUT_PREFIX = {
    ["ghost"]=true, ["stone"]=true, ["gold"]=true,
    ["albino"]=true, ["shiny"]=true, ["big"]=true, ["corrupt"]=true,
}
local function baseNameForRarity(displayName)
    local words = {}
    for w in tostring(displayName or ""):gmatch("%S+") do table.insert(words, w) end
    if #words == 0 then return displayName end
    local first = words[1]:lower()
    if MUT_PREFIX[first] and #words >= 2 then
        table.remove(words, 1)
        return table.concat(words, " ")
    end
    return displayName
end

-- urutan prioritas rarity untuk section
local RARITY_ORDER = { "Secret","Mythic","Legendary","Epic","Rare","Common","Uncommon" }
local RARITY_INDEX = {}
for i, r in ipairs(RARITY_ORDER) do RARITY_INDEX[r] = i end

-- build embeds: grouped by rarity (bold), hanya show rarity yang ada
local function buildStatsEmbeds_fromCounts()
    local groups = {}
    local any = false

    for dispName, n in pairs(Stats.counts) do
        local base = baseNameForRarity(dispName)
        local info = resolveFishInfoByName(base)
        local rarity = (info and info.rarity) or "(unknown)"
        if rarity == "Legendary / Mythic" then rarity = "Legendary" end

        if RARITY_INDEX[rarity] then
            any = true
            groups[rarity] = groups[rarity] or {}
            table.insert(groups[rarity], string.format("- %s x%d", dispName, tonumber(n) or 0))
        end
    end

    local embeds = {{
        author = { name = "LimitHub", icon_url = AUTHOR_ICON },
        title  = "LimitHub - Static Player",
        description = string.format("Player Name : ||%s||", LocalPlayer.Name),
        color  = 0x00BFFF,
        thumbnail = { url = AUTHOR_ICON },
        footer = { text = string.format("discord.gg/limithub • Last update %s", _clockStr()) },
        timestamp = DateTime.now():ToIsoDate()
    }}
    if not any then return embeds end

    local sections = {}
    for _, rarity in ipairs(RARITY_ORDER) do
        local list = groups[rarity]
        if list and #list > 0 then
            table.sort(list)
            table.insert(sections, string.format("**%s** :\n%s", rarity, table.concat(list, "\n")))
        end
    end
    local desc = table.concat(sections, "\n\n")

    local MAX = 1800
    local function splitText(t, maxlen)
        local parts = {}
        while #t > maxlen do
            local cut = t:sub(1, maxlen)
            local p = cut:match("^(.*)\n") or cut
            table.insert(parts, p)
            t = t:sub(#p + 2)
        end
        if #t > 0 then table.insert(parts, t) end
        return parts
    end

    local chunks = splitText(desc, MAX)
    for i, chunk in ipairs(chunks) do
        table.insert(embeds, {
            description = chunk,
            color = 0x00BFFF,
            thumbnail = { url = AUTHOR_ICON },
            footer = { text = string.format("discord.gg/limithub • Last update %s%s",
                      _clockStr(), (#chunks>1 and (" • Page "..i.."/"..#chunks) or "")) },
            timestamp = DateTime.now():ToIsoDate()
        })
    end

    return embeds
end

local function updateStatsWebhook_fromCounts()
    if not WebhookState.statsEnabled or WebhookState.statsUrl == "" then return end

    local embeds  = buildStatsEmbeds_fromCounts()
    local payload = HttpService:JSONEncode({ embeds = embeds })

    if payload == WebhookState.lastStats then return end
    WebhookState.lastStats = payload

    local req = (syn and syn.request) or (http and http.request) or http_request or request
    if not req then return end

    pcall(function()
        if WebhookState.statsMsgId then
            local editUrl = WebhookState.statsUrl .. "/messages/" .. WebhookState.statsMsgId
            req({ Url = editUrl, Method = "PATCH", Headers = {["Content-Type"]="application/json"}, Body = payload })
        else
            local res = req({
                Url = WebhookState.statsUrl .. "?wait=true",
                Method = "POST",
                Headers = {["Content-Type"]="application/json"},
                Body = payload
            })
            if res and res.Body then
                local ok, json = pcall(function() return HttpService:JSONDecode(res.Body) end)
                if ok and json and json.id then WebhookState.statsMsgId = json.id end
            end
        end
    end)
end

task.spawn(function()
    while true do
        task.wait(4)
        if Stats.dirty then
            Stats.dirty = false
            updateStatsWebhook_fromCounts()
        end
    end
end)

-- =======================================================================
-- Sending catch webhook (MUTATION-AWARE + THUMBNAIL dari rbxassetid)
-- =======================================================================
local function sendCatchEmbedOnce(fishName, oddsText, weightNumber)
    local displayName = tostring(fishName or "")
    local base = baseNameForRarity(displayName)
    local info = resolveFishInfoByName(base)

    Stats_Add(displayName, 1)

    local effectiveRarity = (info and info.rarity) or "(unknown)"
    if effectiveRarity == "Legendary / Mythic" then effectiveRarity = "Legendary" end
    if not _passRarityFilter(effectiveRarity) then return end

    if not (WebhookState.enabled and type(WebhookState.url)=="string" and #WebhookState.url>0) then return end
    local req = (syn and syn.request) or (http and http.request) or http_request or request
    if not req then return end

    local fields = {}
    if oddsText then table.insert(fields, { name="Odds", value=tostring(oddsText), inline=true }) end
    if weightNumber then table.insert(fields, { name="Weight", value=string.format("%.2f kg", weightNumber), inline=true }) end

    local embed = {
        author = { name = "LimitHub", icon_url = AUTHOR_ICON },
        title = displayName,
        description = effectiveRarity,
        color = RarityColor[effectiveRarity] or 0x3498DB,
        fields = (#fields>0) and fields or nil,
        footer = { text = "discord.gg/limithub" },
        timestamp = DateTime.now():ToIsoDate()
    }
    if info and info.iconUrl then
        embed.thumbnail = { url = info.iconUrl }
    end

    pcall(function()
        req({
            Url = WebhookState.url,
            Method = "POST",
            Headers = {["Content-Type"]="application/json"},
            Body = HttpService:JSONEncode({ content = "", embeds = { embed } })
        })
    end)
end

-- =======================================================================
-- AUTO FISH, SELL, PLAYER, SHOP, ISLANDS, NPC, SETTINGS
-- =======================================================================

local VirtualUser = game:GetService("VirtualUser")

local net = ReplicatedStorage:WaitForChild("Packages")
    :WaitForChild("_Index")
    :WaitForChild("sleitnick_net@0.2.0")
    :WaitForChild("net")

local rodRemote        = net:WaitForChild("RF/ChargeFishingRod")
local miniGameRemote   = net:WaitForChild("RF/RequestFishingMinigameStarted")
local finishRemote     = net:WaitForChild("RE/FishingCompleted")
local PurchaseBaitRF   = net:WaitForChild("RF/PurchaseBait")

local autofish, perfectCast, ijump = false, true, false
local autoFishTask

LocalPlayer.Idled:Connect(function()
    VirtualUser:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
    task.wait(1)
    VirtualUser:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
end)

local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local __HIDE_TAG = "__LimitHubHidden"
local __hideConns, __saved, __watchConn = {}, {}, nil

local function __rootGui(obj)
    local sg = obj:FindFirstAncestorOfClass("ScreenGui")
    if sg then return sg end
    local top = obj
    while top and top.Parent and top.Parent ~= PlayerGui do
        top = top.Parent
    end
    return top
end

local function __isFishingUi(obj)
    if obj:IsA("TextLabel") or obj:IsA("TextButton") then
        local t = (obj.Text or ""):lower()
        if t:find("click fast") or t:find("charge") or t:find("perfect") then return true end
    end
    if (obj:IsA("Frame") or obj:IsA("ImageLabel")) then
        local s = obj.AbsoluteSize
        if s and s.Y >= 80 and s.X <= 40 then
            local root = __rootGui(obj) or obj
            for _, d in ipairs(root:GetDescendants()) do
                if d:IsA("TextLabel") then
                    local tt = (d.Text or ""):lower()
                    if tt:find("click fast") or tt:find("charge") or tt:find("perfect") then return true end
                end
            end
        end
    end
    return false
end

local function __hideObj(go)
    if __saved[go] == nil then
        __saved[go] = {
            Visible = go:IsA("GuiObject") and go.Visible or nil,
            Enabled = go:IsA("ScreenGui") and go.Enabled or nil,
            BT = go:IsA("Frame") and go.BackgroundTransparency or nil,
            TT = go:IsA("TextLabel") and go.TextTransparency or nil,
            IT = go:IsA("ImageLabel") and go.ImageTransparency or nil,
        }
    end
    if go:IsA("ScreenGui") then go.Enabled = false end
    if go:IsA("GuiObject") then go.Visible = false end
    if go:IsA("Frame") then go.BackgroundTransparency = 1 end
    if go:IsA("TextLabel") then go.TextTransparency = 1 end
    if go:IsA("ImageLabel") then go.ImageTransparency = 1 end
    go:SetAttribute(__HIDE_TAG, true)

    table.insert(__hideConns, go.Changed:Connect(function(prop)
        if not go:GetAttribute(__HIDE_TAG) then return end
        if prop == "Visible" and go:IsA("GuiObject") then go.Visible = false end
        if prop == "Enabled" and go:IsA("ScreenGui") then go.Enabled = false end
        if prop == "BackgroundTransparency" and go:IsA("Frame") then go.BackgroundTransparency = 1 end
        if prop == "TextTransparency" and go:IsA("TextLabel") then go.TextTransparency = 1 end
        if prop == "ImageTransparency" and go:IsA("ImageLabel") then go.ImageTransparency = 1 end
    end))
end

local function __hideTree(root)
    if not root then return end
    if root:IsA("GuiObject") or root:IsA("ScreenGui") then __hideObj(root) end
    for _, d in ipairs(root:GetDescendants()) do
        if d:IsA("GuiObject") then __hideObj(d) end
    end
end

local function __enableHideFishingGui()
    for _, d in ipairs(PlayerGui:GetDescendants()) do
        if __isFishingUi(d) then __hideTree(__rootGui(d)) end
    end
    __watchConn = PlayerGui.DescendantAdded:Connect(function(obj)
        if __isFishingUi(obj) then __hideTree(__rootGui(obj)) end
    end)
end

local function __restoreObj(go, st)
    if not st then return end
    if go:IsA("ScreenGui") and st.Enabled ~= nil then go.Enabled = st.Enabled end
    if go:IsA("GuiObject") and st.Visible ~= nil then go.Visible = st.Visible end
    if go:IsA("Frame") and st.BT ~= nil then go.BackgroundTransparency = st.BT end
    if go:IsA("TextLabel") and st.TT ~= nil then go.TextTransparency = st.TT end
    if go:IsA("ImageLabel") and st.IT ~= nil then go.ImageTransparency = st.IT end
    go:SetAttribute(__HIDE_TAG, nil)
end

local function __disableHideFishingGui()
    if __watchConn then __watchConn:Disconnect() __watchConn = nil end
    for _, c in ipairs(__hideConns) do pcall(function() c:Disconnect() end) end
    table.clear(__hideConns)
    for go, st in pairs(__saved) do
        if go and go.Parent then pcall(function() __restoreObj(go, st) end) end
    end
    table.clear(__saved)
end

local rodCharged = false
local function safeFinish()
    if rodCharged and finishRemote and finishRemote.Parent then
        local ok = pcall(function() finishRemote:FireServer() end)
        if ok then return true end
    end
    return false
end

local FarmSection = Tabs.Main:AddSection("Auto Fish")

FarmSection:AddToggle("AutoFishing", {
    Title = "Auto Fishing",
    Description = "Fast Mode (Sometimes Bug)",
    Default = false,
    Callback = function(enabled)
        if autoFishTask then task.cancel(autoFishTask); autoFishTask = nil end
        if not enabled then __disableHideFishingGui(); return end

        __enableHideFishingGui()

        autoFishTask = task.spawn(function()
            local RS = game:GetService("ReplicatedStorage")
            local okController, controllerOrErr = pcall(function() return require(RS.Controllers.FishingController) end)
            if not okController then return end
            local a = controllerOrErr

            if not _G.fishinghooked then
                local okOld, old = pcall(function() return clonefunction(a.FishingMinigameClick) end)
                if okOld and old then
                    a.FishingMinigameClick = function()
                        if getupvalue(old, 1) and getupvalue(old, 2) then
                            getupvalue(old, 3):Fire(getupvalue(old, 2))
                            return safeFinish()
                        end
                    end
                    _G.fishinghooked = true
                end
            end

            a._getPower = function() return 9e9 end

            while true do
                task.wait(0.00000001)
                pcall(function() for _, v in next, getproto(a.RequestChargeFishingRod, 1, true) do v() end end)
                pcall(function()
                    if getupvalue(a.RequestChargeFishingRod, 2) == false then
                        a.RequestChargeFishingRod(9e9); rodCharged = true
                    end
                end)
                pcall(function() safeFinish() end)
            end
        end)
    end
})

FarmSection:AddToggle("AutoFishing v2", {
    Title = "Auto Fish (Perfect Mode)",
    Description = "Best Mode (Safe)",
    Default = false,
    Callback = function(enabled)
        if autoFishTask then task.cancel(autoFishTask); autoFishTask = nil end

        if not enabled then
            __disableHideFishingGui()
            local args = { false }
            ReplicatedStorage:WaitForChild("Packages"):WaitForChild("_Index")
                :WaitForChild("sleitnick_net@0.2.0"):WaitForChild("net")
                :WaitForChild("RF/UpdateAutoFishingState"):InvokeServer(unpack(args))
            return
        end

        __enableHideFishingGui()

        autoFishTask = task.spawn(function()
            local RS = game:GetService("ReplicatedStorage")
            local okController, controllerOrErr = pcall(function() return require(RS.Controllers.FishingController) end)
            if not okController then return end
            local a = controllerOrErr

            if not _G.fishinghooked then
                local okOld, old = pcall(function() return clonefunction(a.FishingMinigameClick) end)
                if okOld and old then
                    a.FishingMinigameClick = function()
                        if getupvalue(old, 1) and getupvalue(old, 2) then
                            getupvalue(old, 3):Fire(getupvalue(old, 2))
                            return safeFinish()
                        end
                    end
                    _G.fishinghooked = true
                end
            end

            a._getPower = function() return 9e9 end

            local args = { true }
            ReplicatedStorage:WaitForChild("Packages"):WaitForChild("_Index")
                :WaitForChild("sleitnick_net@0.2.0"):WaitForChild("net")
                :WaitForChild("RF/UpdateAutoFishingState"):InvokeServer(unpack(args))

            while true do
                task.wait(0.00000001)
                pcall(function() for _, v in next, getproto(a.RequestChargeFishingRod, 1, true) do v() end end)
                pcall(function()
                    if getupvalue(a.RequestChargeFishingRod, 2) == false then
                        a.RequestChargeFishingRod(9e9); rodCharged = true
                    end
                end)
                pcall(function() safeFinish() end)
            end
        end)
    end
})

FarmSection:AddButton({
    Title = "Sell All Fishes",
    Description = "Automatically sell all Fishes",
    Callback = function()
        local charFolder = workspace:FindFirstChild("Characters")
        local char = charFolder and charFolder:FindFirstChild(LocalPlayer.Name)
        local hrp = char and char:FindFirstChild("HumanoidRootPart")
        if not hrp then return end
        local originalPos = hrp.Position
        local sellerPos = Vector3.new(-32, 5, 2885)
        local sellRemote = net:WaitForChild("RF/SellAllItems")
        task.spawn(function()
            hrp.CFrame = CFrame.new(sellerPos + Vector3.new(0, 3, 0))
            task.wait(0.5)
            pcall(function() sellRemote:InvokeServer() end)
            -- reset statistik agar sinkron setelah jual
            Stats_Reset()
            NotifyHub("Sold all fishes & reset local stats")
            hrp.CFrame = CFrame.new(originalPos + Vector3.new(0, 3, 0))
        end)
    end
})

-- Player Section
local PlayerSection = Tabs.Player:AddSection("Player Features")
PlayerSection:AddSlider("WalkSpeed", {
    Title = "WalkSpeed", Description = "Adjust walk speed",
    Min = 16, Max = 150, Increment = 1, Rounding = 0, Default = 16,
    Callback = function(val)
        local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if hum then hum.WalkSpeed = val end
    end
})
PlayerSection:AddSlider("JumpPower", {
    Title = "Jump Power", Description = "Adjust jump power",
    Min = 50, Max = 500, Increment = 10, Rounding = 0, Default = 50,
    Callback = function(val)
        local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if hum then
            hum.UseJumpPower = true
            hum.JumpPower = val
        end
    end
})

-- ================= WEATHER =================
local WeatherSection = Tabs.Weather:AddSection("Auto Weather")

local __autoWeatherOn = false
local __selectedWeathers = {}

local function _normW(s)
    return (tostring(s or ""):gsub("^%s+",""):gsub("%s+$",""):lower())
end
local WeatherAlias = { ["strom"] = "Storm" }

local function __purchaseWeather(preset)
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local ok, res = pcall(function()
        local canon = WeatherAlias[_normW(preset)] or preset
        local args = { tostring(canon or "Wind") }
        local rf = ReplicatedStorage
            :WaitForChild("Packages")
            :WaitForChild("_Index")
            :WaitForChild("sleitnick_net@0.2.0")
            :WaitForChild("net")
            :WaitForChild("RF/PurchaseWeatherEvent")
        return rf:InvokeServer(unpack(args))
    end)
    if not ok then warn("[Weather] Invoke failed:", res) end
    return ok, res
end

local function __purchaseAll(list)
    for _, w in ipairs(list) do __purchaseWeather(w) end
end

-- Multi-select: Values = dictionary label->string, Default = {} (map terpilih)
local WeatherValues = {
    Wind    = "Wind",
    Cloudy  = "Cloudy",
    Snow    = "Snow",
    Strom   = "Strom",
    Radiant = "Radiant",
}

WeatherSection:AddDropdown("WeatherChoice", {
    Title = "Weather Preset",
    Values = WeatherValues,
    Multi  = true,
    Default = {},  -- kosong (hindari string tunggal di loader)
    Callback = function(valMap)
        __selectedWeathers = {}
        if type(valMap) == "table" then
            for label, chosen in pairs(valMap) do
                if chosen then table.insert(__selectedWeathers, tostring(label)) end
            end
        elseif type(valMap) == "string" then
            __selectedWeathers = { valMap }
        end

        if __autoWeatherOn and #__selectedWeathers > 0 then
            __purchaseAll(__selectedWeathers)
        end
    end
})

WeatherSection:AddToggle("AutoWeatherToggle", {
    Title = "Auto Weather",
    Description = "Auto purchase selected weather",
    Default = false,
    Callback = function(state)
        __autoWeatherOn = state and true or false
        if __autoWeatherOn and #__selectedWeathers > 0 then
            __purchaseAll(__selectedWeathers)
        end
    end
})


local EnchantSection = Tabs.Enchant:AddSection("Enchant Rod Option")

local ENCHANT_POS = Vector3.new(3258.40, -1300.65, 1386.94)

EnchantSection:AddButton({
    Title = "Enchant Rod",
    Description = "Make sure you have enchant stone!",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local net = ReplicatedStorage
            :WaitForChild("Packages")
            :WaitForChild("_Index")
            :WaitForChild("sleitnick_net@0.2.0")
            :WaitForChild("net")

        local charFolder = workspace:FindFirstChild("Characters")
        local char = charFolder and charFolder:FindFirstChild(LocalPlayer.Name)
        local hrp = char and char:FindFirstChild("HumanoidRootPart")
        if not hrp then return end


        local originalCF = hrp.CFrame


        hrp.CFrame = CFrame.new(ENCHANT_POS + Vector3.new(0,3,0))
        task.wait(1)


        pcall(function()
            local args = { "37827319-3977-45e7-b445-ac44cec95386", "EnchantStones" }
            net:WaitForChild("RE/EquipItem"):FireServer(unpack(args))
        end)


        pcall(function()
            net:WaitForChild("RE/ActivateEnchantingAltar"):FireServer()
        end)


        task.delay(0.25, function()
            pcall(function()
                hrp.CFrame = originalCF
            end)
        end)

        if NotifyHub then
            NotifyHub("Enchant Progress")
        end
    end
})

-- ================= SHOP =================
local BaitIds  = { ["Luck Bait"]=2, ["Midnight Bait"]=3, ["Nature Bait"]=4, ["Chroma Bait"]=5, ["Dark Matter Bait"]=6, ["Corrupt Bait"]=7, ["Aether Bait"]=8 }
local BaitList = { "Luck Bait","Midnight Bait","Nature Bait","Chroma Bait","Dark Matter Bait","Corrupt Bait","Aether Bait" }
local ShopSection = Tabs.Shop:AddSection("Bobber Shop")
ShopSection:AddDropdown("BaitDropdown", {
    Title = "Select: Bait", Values = BaitList, Default = nil, Multi = false,
    Callback = function(value)
        if not value then return end
        local id = BaitIds[value]; if not id then return end
        pcall(function() return PurchaseBaitRF:InvokeServer(id) end)
    end
})

-- ================= ISLANDS =================
local IslandsSection = Tabs.Islands:AddSection("Islands Teleport")
local islandCoordsList = {
    ["01"]={name="Weather Machine", position=Vector3.new(-1471,-3,1929)},
    ["02"]={name="Esoteric Depths", position=Vector3.new(3157,-1303,1439)},
    ["03"]={name="Tropical Grove",  position=Vector3.new(-2038,3,3650)},
    ["04"]={name="Stingray Shores", position=Vector3.new(-32,4,2773)},
    ["05"]={name="Kohana Volcano",  position=Vector3.new(-519,24,189)},
    ["06"]={name="Coral Reefs",     position=Vector3.new(-3095,1,2177)},
    ["07"]={name="Crater Island",    position=Vector3.new(968,1,4854)},
    ["08"]={name="Kohana",           position=Vector3.new(-658,3,719)},
    ["09"]={name="Winter Fest",      position=Vector3.new(1611,4,3280)},
    ["10"]={name="Isoteric Island",  position=Vector3.new(1987,4,1400)},
    ["11"]={name="Lost Isle",        position=Vector3.new(-3693.93,-135.57+5,-1022.77)},
}
for _, data in pairs(islandCoordsList) do
    IslandsSection:AddButton({
        Title = data.name, Description = "Teleport to " .. data.name,
        Callback = function()
            pcall(function()
                local charFolder = workspace:WaitForChild("Characters", 5)
                local char = charFolder:FindFirstChild(LocalPlayer.Name); if not char then error("Character not found") end
                local hrp = char:FindFirstChild("HumanoidRootPart") or char:WaitForChild("HumanoidRootPart", 3)
                if not hrp then error("HumanoidRootPart not found") end
                hrp.CFrame = CFrame.new(data.position + Vector3.new(0,5,0))
            end)
        end
    })
end

-- ================= NPC =================
local NPCSection = Tabs.NPC:AddSection("NPC Teleport")
local npcFolder = ReplicatedStorage:WaitForChild("NPC")
for _, npc in pairs(npcFolder:GetChildren()) do
    if npc:IsA("Model") then
        local hrp = npc:FindFirstChild("HumanoidRootPart") or npc.PrimaryPart
        if hrp then
            NPCSection:AddButton({
                Title = npc.Name, Description = "Teleport to " .. npc.Name,
                Callback = function()
                    local charFolder = workspace:FindFirstChild("Characters", 5)
                    local char = charFolder and charFolder:FindFirstChild(LocalPlayer.Name)
                    if not char then return end
                    local myHRP = char:FindFirstChild("HumanoidRootPart")
                    if myHRP then myHRP.CFrame = hrp.CFrame + Vector3.new(0,3,0) end
                end
            })
        end
    end
end

-- ================= SETTINGS =================
local SettingsSection = Tabs.Settings:AddSection("Performance & Server")
SettingsSection:AddButton({
    Title = "Boost FPS (Maximize Performance)",
    Description = "Optimize game for better FPS",
    Callback = function()
        for _, v in pairs(game:GetDescendants()) do
            if v:IsA("BasePart") then v.Material = Enum.Material.SmoothPlastic v.Reflectance = 0
            elseif v:IsA("Decal") or v:IsA("Texture") then v.Transparency = 1 end
        end
        local Lighting = game:GetService("Lighting")
        for _, effect in pairs(Lighting:GetChildren()) do if effect:IsA("PostEffect") then effect.Enabled = false end end
        Lighting.GlobalShadows = false
        Lighting.FogEnd = 1e10
        settings().Rendering.QualityLevel = "Level01"
    end
})

local TeleportService = game:GetService("TeleportService")
local function Rejoin() local p = Players.LocalPlayer; if p then TeleportService:Teleport(game.PlaceId, p) end end
local function ServerHop()
    local placeId, servers, cursor = game.PlaceId, {}, ""
    repeat
        local url = "https://games.roblox.com/v1/games/"..placeId.."/servers/Public?sortOrder=Asc&limit=100" .. (cursor~="" and ("&cursor="..cursor) or "")
        local ok, result = pcall(function() return HttpService:JSONDecode(game:HttpGet(url)) end)
        if ok and result and result.data then
            for _, server in pairs(result.data) do
                if server.playing < server.maxPlayers and server.id ~= game.JobId then
                    table.insert(servers, server.id)
                end
            end
            cursor = result.nextPageCursor or ""
        else break end
    until not cursor or #servers > 0
    if #servers > 0 then TeleportService:TeleportToPlaceInstance(placeId, servers[math.random(1,#servers)], LocalPlayer) end
end
SettingsSection:AddButton({ Title = "Rejoin Server", Description = "Rejoin the current server", Callback = Rejoin })
SettingsSection:AddButton({ Title = "Server Hop (New Server)", Description = "Hop to a new server", Callback = ServerHop })

-- Catch hook → panggil sendCatchEmbedOnce
do
    local LP = Players.LocalPlayer
    local PG2 = LP:WaitForChild("PlayerGui")
    local hooked      = setmetatable({}, {__mode = "k"})
    local lastLogAt   = setmetatable({}, {__mode = "k"})

    local function clean(s)
        if not s then return "" end
        s = s:gsub("[%z\1-\127\194-\244][\128-\191]*", function(ch) return (ch:byte() <= 127) and ch or "" end)
        return (s:gsub("^%s+",""):gsub("%s+$",""))
    end

    local function parseFishLine(s)
        s = clean(s)
        local name, kg = s:match("^(.-)%s*%(([%d%.]+)%s*kg%)$")
        if name then return (name:gsub("%s+"," ")), tonumber(kg) end
        return (s:gsub("%s+"," ")), nil
    end

    local function findSiblingInfo(container)
        local odds, fishLine
        for _, d in ipairs(container:GetDescendants()) do
            if d:IsA("TextLabel") then
                local t = clean(d.Text or "")
                if (not odds) and t:match("^(%d+)%s*in%s*(%d+)$") then odds = t:gsub("%s+"," ") end
                if (not fishLine) and (t:match("%(([%d%.]+)%s*kg%)")) then fishLine = t end
            end
            if odds and fishLine then break end
        end
        return odds, fishLine
    end

    local function logOnce(container, name, kg, odds)
        local now = os.clock()
        local last = lastLogAt[container]
        if last and now - last < 0.35 then return end
        lastLogAt[container] = now
        sendCatchEmbedOnce(tostring(name), odds, kg)
    end

    local function tryAssembleFrom(container)
        local odds, fishLine = findSiblingInfo(container)
        if not fishLine then return end
        local name, kg = parseFishLine(fishLine)
        if not name or name == "" then return end
        logOnce(container, name, kg, odds)
    end

    local function hookLabel(lbl)
        if hooked[lbl] then return end
        hooked[lbl] = true
        local function onChange()
            local t = clean(lbl.Text or "")
            if t == "" then return end
            if t:match("^(%d+)%s*in%s*(%d+)$") then tryAssembleFrom(lbl.Parent or lbl); return end
            if t:match("%(([%d%.]+)%s*kg%)") then tryAssembleFrom(lbl.Parent or lbl); return end
            if t:find("^%s*You%s*got") then task.delay(0.06, function() tryAssembleFrom(lbl.Parent or lbl) end) end
        end
        onChange()
        lbl:GetPropertyChangedSignal("Text"):Connect(onChange)
    end

    for _, d in ipairs(PG2:GetDescendants()) do if d:IsA("TextLabel") then hookLabel(d) end end
    PG2.DescendantAdded:Connect(function(obj) if obj:IsA("TextLabel") then hookLabel(obj) end end)
end

-- Save/Load config
local resetcfg = false
SaveManager:SetLibrary(Library)
if isfile(CONFIG_PATH) then SaveManager:Load(CONFIG_PATH) end

local AutoSaveRunning = true
task.spawn(function()
    while AutoSaveRunning do
        task.wait(1)
        if not resetcfg then SaveManager:Save(CONFIG_PATH) end
    end
end)

Tabs.Settings:AddButton({
    Title = "Reset Config",
    Callback = function()
        AutoSaveRunning = false
        resetcfg = true
        G.__LimitHub_Running = false
        task.wait(0.15)
        if isfile(CONFIG_PATH) then
            delfile(CONFIG_PATH)
            NotifyHub("Reseted Config")
        else
            NotifyHub("No config detected")
        end
    end
})
